" vim: set ts=2 sw=2 et:
set nocompatible

" Set space for the leader. Done as early as possible in the vimrc.
nnoremap <Space> <nop>
let mapleader = " "
let maplocalleader = " "

" Source host-specific initialization first if necessary
" i.e. ~/.vim/$HOSTNAME.vim
let s:vimdir = fnamemodify(expand("$MYVIMRC"), ":p:h")
let s:host_vimrc = s:vimdir . "/" . split(hostname(), '\.')[0] . ".vim"
let s:host_plugs = s:vimdir . "/" . split(hostname(), '\.')[0] . ".plugs.vim"

call plug#begin('~/.local/share/vim/plugged')

" Obligatory tpope plugins
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rsi'

Plug 'junegunn/fzf', { 'do': './install --all --xdg --no-fish --no-update-rc' }
Plug 'junegunn/fzf.vim'

Plug 'kien/rainbow_parentheses.vim'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'

Plug 'rodjek/vim-puppet'
Plug 'arcticicestudio/nord-vim'

if has('nvim')
  " Language server awareness
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

  " Autocompletion manager
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'roxma/nvim-yarp'
  Plug 'ncm2/ncm2'
  Plug 'ncm2/ncm2-go'
  Plug 'ncm2/ncm2-path'
  Plug 'ncm2/ncm2-vim' | Plug 'Shougo/neco-vim'

  if exists('##MenuPopupChanged')
    Plug 'ncm2/float-preview.nvim'
  endif

  " Show function signatures in command line
  Plug 'Shougo/echodoc.vim'

  " Snippetz
  Plug 'SirVer/ultisnips'
  Plug 'ncm2/ncm2-ultisnips'
  Plug 'honza/vim-snippets'
endif

" Pull in host-specific plugins if found.
if filereadable(s:host_plugs)
  execute 'source ' . s:host_plugs
endif

call plug#end()

" Sensible paths for backup data
if !has('nvim')
  if !filereadable($HOME . "/.cache/vim")
    silent! call mkdir($HOME . "/.cache/vim/undo", "p")
    silent! call mkdir($HOME . "/.cache/vim/swap", "p")
    silent! call mkdir($HOME . "/.cache/vim/backup", "p")
  endif

  set undodir=~/.cache/vim/undo
  set directory=~/.cache/vim/swap
  set backupdir=~/.cache/vim/backup
endif

" Set 24bit color when appropriate
if $COLORTERM == 'truecolor' || $TERM =~ '-256color'
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

set title " set window title to match filename
set hlsearch
set number
set showmatch
set hidden
set wrap
set ignorecase
set smartcase
set wildignore+=*.pyc,*.o,*.class,*.lo,.git,vendor/*,node_modules/**,bower_components/**,
set mouse=
set backupcopy=yes " Setting backup copy preserves file inodes, which are needed for Docker file mounting
set signcolumn=yes
set cursorline

" Handle undo
set undofile
set undoreload=10000 "maximum number lines to save for undo on a buffer reload
set undolevels=1000 "maximum number of changes that can be undone

" Stop J from inserting extra spaces
set nojoinspaces

" Make splits work more intuitively
set splitbelow
set splitright

map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
map <silent> <LocalLeader>nr :NERDTree<CR>
map <silent> <LocalLeader>nf :NERDTreeFind<CR>

" FZF
map <silent> <leader>ff :Files<CR>
map <silent> <leader>fg :GFiles<CR>
map <silent> <leader>fb :Buffers<CR>
map <silent> <leader>ft :Tags<CR>

map <silent> <C-p> :Files<CR>

nnoremap <silent> k gk
nnoremap <silent> j gj
nnoremap <silent> Y y$

" CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
inoremap <c-c> <ESC>

map <silent> <LocalLeader>pp :set paste!<CR>

command! SudoW w !sudo tee %

command! W w

"function! Trim()
"  %s/\s*$//
"  ''
"endfunction
"command! -nargs=0 Trim :call Trim()
"nnoremap <silent> <Leader>cw :Trim<CR>

" NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.o$', '\.class$', '\.lo$']
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeMinimalUI = 1
let g:netrw_banner = 0

" Nord colorscheme
set background=dark
let g:nord_italic = 1
let g:nord_underline = 1
let g:nord_uniform_diff_background = 1
let g:nord_cursor_line_number_background = 1
colorscheme nord

" echodoc
set cmdheight=2
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'signature'

"let g:go_disable_autoinstall = 1
"let g:go_gocode_bin = 'gocode'

if has('nvim')
  " float-preview.vim
  let g:float_preview#docked = 1

  " Use neovim's magic live preview
  set inccommand=nosplit

  " enable ncm2 for all buffers
  autocmd BufEnter * call ncm2#enable_for_buffer()

  " Delay before starting completions to wait for slower completion sources.
  let g:ncm2#complete_delay = 300

  " Press enter key to trigger snippet expansion
  " The parameters are the same as `:help feedkeys()`
  inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

  " c-j c-k for moving in snippet
  " let g:UltiSnipsExpandTrigger    = "<Plug>(ultisnips_expand)"
  let g:UltiSnipsJumpForwardTrigger = "<c-j>"
  let g:UltiSnipsJumpBackwardTrigger  = "<c-k>"
  let g:UltiSnipsRemoveSelectModeMappings = 0

  " Use <TAB> to select the popup menu:
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

  " IMPORTANT: :help Ncm2PopupOpen for more information
  set completeopt=noinsert,menuone,noselect

  " supress the annoying 'match x of y', 'The only match' and 'Pattern not
  " found' messages
  set shortmess+=c

  let g:LanguageClient_serverCommands = {
         \ 'go': ['bingo'],
         \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
         \ }

  let g:LanguageClient_rootMarkers = {
        \ 'go': ['.git', 'go.mod'],
        \ }

  let g:LanguageClient_completionPreferTextEdit = 1

  function! LC_maps()
    if has_key(g:LanguageClient_serverCommands, &filetype)
      nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
      nnoremap <buffer> <silent> <c-]> :call LanguageClient#textDocument_definition()<CR>
      nnoremap <buffer> <silent> <leader>ld :call LanguageClient#textDocument_definition()<CR>
      nnoremap <buffer> <silent> <leader>li :call LanguageClient#textDocument_implementation()<CR>
      nnoremap <buffer> <silent> <leader>lr :call LanguageClient#textDocument_rename()<CR>
    endif
  endfunction
  autocmd FileType * call LC_maps()

  " Run gofmt and goimports on save
  autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
endif

" Pull in host-specific configuration if found. Done at the end to be able to
" override anything already set.
if filereadable(s:host_vimrc)
  execute 'source ' . s:host_vimrc
endif
